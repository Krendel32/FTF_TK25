/***** –ù–ê–°–¢–†–û–ô–ö–ò *****/
const CONFIG = {
  // –ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è —Å–µ–º–µ—Å—Ç—Ä–∞ (–ª–æ–∫–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞, –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö —Ç–æ–π –Ω–µ–¥–µ–ª–∏)
  startOfSemester: { y: 2025, m: 9, d: 1 }, // 3 —Ñ–µ–≤—Ä–∞–ª—è 2025
  firstWeekType: "even", // "even" = —á—ë—Ç–Ω–∞—è, "odd" = –Ω–µ—á—ë—Ç–Ω–∞—è
};

/***** –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–ê–¢–´ –î–õ–Ø –¢–ï–°–¢–ê *****/
let customDate = null; // –µ—Å–ª–∏ null ‚Äî –±–µ—Ä—ë–º —Å–∏—Å—Ç–µ–º–Ω—É—é –¥–∞—Ç—É

function makeLocalDate(y, m, d) {
  // m ‚Äî 1..12
  return new Date(y, m - 1, d, 0, 0, 0, 0);
}

function parseLocalDateFromInput(yyyy_mm_dd) {
  // "2025-09-10" -> –ª–æ–∫–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–µ–∑ UTC-—Å–¥–≤–∏–≥–æ–≤
  const [y, m, d] = yyyy_mm_dd.split("-").map(Number);
  return makeLocalDate(y, m, d);
}

function now() {
  // –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ù–û–í–´–ô –æ–±—ä–µ–∫—Ç Date (—á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–∏–∫)
  return customDate ? new Date(customDate.getTime()) : new Date();
}

/***** –£–¢–ò–õ–ò–¢–´ –î–ê–¢ *****/
function startOfMondayWeek(date) {
  // –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 00:00:00 –ª–æ–∫–∞–ª—å–Ω–æ)
  const d = new Date(date.getFullYear(), date.getMonth(), date.getDate());
  const weekday = (d.getDay() + 6) % 7; // Mon=0..Sun=6
  d.setDate(d.getDate() - weekday);
  d.setHours(0, 0, 0, 0);
  return d;
}

function getWeekType(current = now()) {
  const semesterStart = makeLocalDate(
    CONFIG.startOfSemester.y,
    CONFIG.startOfSemester.m,
    CONFIG.startOfSemester.d
  );
  const w1 = startOfMondayWeek(semesterStart);
  const w2 = startOfMondayWeek(current);
  const diffWeeks = Math.trunc((w2 - w1) / (7 * 24 * 60 * 60 * 1000));

  // 0 –Ω–µ–¥–µ–ª—å —Ä–∞–∑–Ω–∏—Ü—ã -> –ø–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è —Å–µ–º–µ—Å—Ç—Ä–∞
  const sameAsFirst = diffWeeks % 2 === 0;
  if (sameAsFirst) return CONFIG.firstWeekType;
  return CONFIG.firstWeekType === "even" ? "odd" : "even";
}


function renderBreakIndicator(lessons, dt = now()) {
  const indicator = document.getElementById("break-indicator");
  if (!indicator) return;

  indicator.textContent = "";
  indicator.style.display = "none";

  if (!lessons || lessons.length === 0) return;

  const cur = dt.getHours() * 60 + dt.getMinutes();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ø–∞—Ä–µ –ª–∏ –º—ã (–µ—Å–ª–∏ –¥–∞ ‚Äî –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ –Ω—É–∂–µ–Ω)
  if (lessons.some(l => isActiveLesson(l, dt))) return;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
  for (let i = 0; i < lessons.length - 1; i++) {
    const end = hmToMinutes(lessons[i].end);
    const startNext = hmToMinutes(lessons[i + 1].start);

    if (cur > end && cur < startNext) {
      indicator.textContent = `–°–µ–π—á–∞—Å –ø–µ—Ä–µ—Ä—ã–≤ (—Å–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ –≤ ${lessons[i + 1].start})`;
      indicator.style.display = "block";
      return;
    }
  }

  // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –ø–∞—Ä—ã
  const lastEnd = hmToMinutes(lessons[lessons.length - 1].end);
  if (cur > lastEnd) {
    indicator.textContent = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚úÖ";
    indicator.style.display = "block";
    return;
  }

  // –ï—Å–ª–∏ –µ—â—ë –¥–æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã
  const firstStart = hmToMinutes(lessons[0].start);
  if (cur < firstStart) {
    indicator.textContent = `–î–æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã (${lessons[0].start})`;
    indicator.style.display = "block";
  }
}



function getDayName(date) {
  const days = [
    "sunday",
    "monday",
    "tuesday",
    "wednesday",
    "thursday",
    "friday",
    "saturday",
  ];
  return days[date.getDay()];
}

function hmToMinutes(hhmm) {
  const [h, m] = hhmm.split(":").map(Number);
  return h * 60 + m;
}

/***** –ü–û–î–°–í–ï–¢–ö–ê –¢–ï–ö–£–©–ï–ô –ü–ê–†–´ *****/
function isActiveLesson(lesson, dt = now()) {
  const cur = dt.getHours() * 60 + dt.getMinutes();
  const start = hmToMinutes(lesson.start);
  const end = hmToMinutes(lesson.end);
  return cur >= start && cur <= end;
}

/***** –†–ï–ù–î–ï–†–´ *****/
function renderToday() {
  const today = now();
  const weekType = getWeekType(today);
  const dayName = getDayName(today);

  const lessons = (schedule[weekType] && schedule[weekType][dayName]) || [];
  const container = document.getElementById("today-schedule");
  if (!container) return;

  if (lessons.length === 0) {
    container.innerHTML = "<p>–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç üéâ</p>";
    return;
  }

  container.innerHTML = "";
  lessons.forEach((lesson) => {
    const div = document.createElement("div");
    div.className = "lesson";
    div.innerHTML = `<strong>${lesson.subject}</strong><br>${lesson.start} - ${lesson.end}`;
    if (isActiveLesson(lesson, today)) div.classList.add("active");
    container.appendChild(div);
    renderBreakIndicator(lessons, today);
  });
}

function renderWeek(weekType, dt = now()) {
  const container = document.getElementById("week-schedule");
  if (!container) return;

  container.innerHTML = "";
  const daysRu = {
    monday: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    tuesday: "–í—Ç–æ—Ä–Ω–∏–∫",
    wednesday: "–°—Ä–µ–¥–∞",
    thursday: "–ß–µ—Ç–≤–µ—Ä–≥",
    friday: "–ü—è—Ç–Ω–∏—Ü–∞",
    saturday: "–°—É–±–±–æ—Ç–∞",
    sunday: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
  };

  const todayName = getDayName(dt);

  for (let day in schedule[weekType]) {
    const dayDiv = document.createElement("div");
    dayDiv.innerHTML = `<h2>${daysRu[day]}</h2>`;

    schedule[weekType][day].forEach((lesson) => {
      const div = document.createElement("div");
      div.className = "lesson";
      div.innerHTML = `<strong>${lesson.subject}</strong><br>${lesson.start} - ${lesson.end}`;

      if (day === todayName && isActiveLesson(lesson, dt)) {
        div.classList.add("active");
      }
      dayDiv.appendChild(div);
    });

    container.appendChild(dayDiv);
  }

  // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–æ–π —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω
  const badge = document.getElementById("week-type-badge");
  if (badge) {
    badge.textContent = weekType === "even" ? "–ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è" : "–ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è";
  }
  
}

/***** –ü–†–ò–ú–ï–ù–ï–ù–ò–ï/–°–ë–†–û–° –¢–ï–°–¢-–î–ê–¢–´ *****/
function applyTestDateFromInput() {
  const inp = document.getElementById("test-date");
  if (!inp || !inp.value) return;

  // –ü–∞—Ä—Å–∏–º –õ–û–ö–ê–õ–¨–ù–û, –±–µ–∑ UTC-—Å–¥–≤–∏–≥–∞:
  customDate = parseLocalDateFromInput(inp.value);
  rerenderAll();
}

function resetTestDate() {
  customDate = null;
  const inp = document.getElementById("test-date");
  if (inp) inp.value = "";
  rerenderAll();
}

/***** –ü–ï–†–ï–†–ò–°–û–í–ö–ê *****/
function rerenderAll() {
  const dt = now();
  const wt = getWeekType(dt);

  // –û–±–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–∏—Å—É–µ—Ç—Å—è —Ç–æ, —á—Ç–æ –µ—Å—Ç—å
  renderToday();
  renderWeek(wt, dt);
}

/***** –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø *****/
document.addEventListener("DOMContentLoaded", () => {
  // –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
  rerenderAll();

  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ week.html
  const switchBtn = document.getElementById("week-switch");
  if (switchBtn) {
    let current = getWeekType(now());
    switchBtn.addEventListener("click", () => {
      current = current === "even" ? "odd" : "even";
      renderWeek(current, now());
    });
  }

  // –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç-–¥–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
  const applyBtn = document.getElementById("apply-test-date");
  if (applyBtn) {
    applyBtn.addEventListener("click", applyTestDateFromInput);
  }
  const resetBtn = document.getElementById("reset-test-date");
  if (resetBtn) {
    resetBtn.addEventListener("click", resetTestDate);
  }

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—É—â—É—é customDate, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞)
  setInterval(() => rerenderAll(), 10 * 1000);
});